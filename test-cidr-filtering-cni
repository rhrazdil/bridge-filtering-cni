#!/bin/bash

source ./cidr-filtering-cni

test_get_object() {
    obj='{"test":{"k1": "value1","k2": "value2"}}'
    assertEquals '{"k1":"value1","k2":"value2"}' "$(get_object "${obj}" ".test")"
}

test_get_array_items() {
    obj='{"test":["k1", "value1","k2", "value2"]}'
    res=$(get_array_items "${obj}" ".test")
    assertContains "$res" "k1"
    assertContains "$res" "value1"
    assertContains "$res" "k2"
    assertContains "$res" "value2"
}

test_get_array_len() {
    obj='{"test":["k1", "value1","k2", "value2"]}'
    assertEquals 4 "$(get_array_len "${obj}" ".test")"
    assertTrue "4 should be longer than 3" "[[ $(get_array_len "${obj}" ".test") -gt 3 ]]"
}

test_for_json_array() {
    _echo_item() {
        local item=$1
        echo "$item"
    }
    obj='{"test":["k1", "value1","k2", "value2"]}'
    res=$(for_json_array "${obj}" ".test" _echo_item)
    assertContains "$res" "value1"
    assertContains "$res" "k2"
    assertContains "$res" "value2"
}

test_get_ip_version() {
    assertEquals "should default to ip when unrecongnized string is provided" "ip" $(get_ip_version "blah")
    assertEquals "should resolve to ip when string with dot is provided" "ip" $(get_ip_version "192.168.1.1")
    assertEquals "should resolve to ip6 when string with colon is provided" "ip6" $(get_ip_version "fe80::1")
}

test_create_table() {
    assertEquals "nft add table bridge filter" "$(create_table bridge filter)"
}

test_create_base_chain() {
    assertEquals "nft add chain table_type table_name chain_name { type filter hook hook_name priority -1; policy accept; }" "$(create_base_chain table_type table_name chain_name hook_name)"
}

test_create_chain() {
    assertEquals "nft add chain table_type table_name chain_name" "$(create_chain table_type table_name chain_name)"
}

test_create_rule() {
    assertEquals "nft add rule table_type table_name chain_name jump dummy-egress" "$(nft_add_rule table_type table_name chain_name jump dummy-egress)"
}



# Load shUnit2 (run the tests)
. shunit2